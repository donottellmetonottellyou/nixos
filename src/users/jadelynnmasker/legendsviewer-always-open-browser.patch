diff --git a/LegendsViewer.Backend/Program.cs b/LegendsViewer.Backend/Program.cs
index aadc32d..ba8d439 100644
--- a/LegendsViewer.Backend/Program.cs
+++ b/LegendsViewer.Backend/Program.cs
@@ -6,6 +6,7 @@ using LegendsViewer.Backend.Legends.Interfaces;
 using LegendsViewer.Backend.Legends.Maps;
 using LegendsViewer.Backend.Logging;
 using LegendsViewer.Frontend;
+using Microsoft.AspNetCore.Connections;
 using Microsoft.Extensions.Logging.Console;
 using System.Text;
 using System.Text.Json.Serialization;
@@ -15,6 +16,8 @@ namespace LegendsViewer.Backend;
 public class Program
 {
     private const string AllowAllOriginsPolicy = "AllowAllOrigins";
+    public const uint BackendPort = 5054;
+    public static readonly string BackendUrl = $"http://localhost:{BackendPort}";
 
     public static void Main(string[] args)
     {
@@ -33,7 +36,7 @@ public class Program
             serverOptions.Limits.KeepAliveTimeout = TimeSpan.FromMinutes(5);
             serverOptions.Limits.RequestHeadersTimeout = TimeSpan.FromMinutes(5);
         })
-        .UseUrls("http://localhost:5054");
+        .UseUrls(BackendUrl);
 
         builder.Services.AddSingleton<IWorld, World>();
         builder.Services.AddSingleton<IWorldMapImageGenerator, WorldMapImageGenerator>();
@@ -75,11 +78,21 @@ public class Program
 
         _ = WebAppStaticServer.RunAsync();
 
+        var openBrowser = Task.Delay(0);
         if (!app.Environment.IsDevelopment())
         {
-            _ = WebAppStaticServer.OpenPageInBrowserAsync();
+            openBrowser = WebAppStaticServer.OpenPageInBrowserAsync();
         }
 
-        app.Run();
+        try
+        {
+            app.Run();
+        }
+        catch (IOException exception) when (exception.InnerException is AddressInUseException)
+        {
+            Console.WriteLine($"Address already in use: {BackendUrl}");
+            Console.WriteLine("Skipping backend server.");
+            Task.WaitAll(openBrowser);
+        }
     }
 }
diff --git a/LegendsViewer.Frontend/WebAppStaticServer.cs b/LegendsViewer.Frontend/WebAppStaticServer.cs
index cdd08aa..69db784 100644
--- a/LegendsViewer.Frontend/WebAppStaticServer.cs
+++ b/LegendsViewer.Frontend/WebAppStaticServer.cs
@@ -1,4 +1,5 @@
-﻿using System.Diagnostics;
+﻿using Microsoft.AspNetCore.Connections;
+using System.Diagnostics;
 
 namespace LegendsViewer.Frontend;
 
@@ -19,7 +20,16 @@ public static class WebAppStaticServer
         app.UseDefaultFiles(new DefaultFilesOptions { DefaultFileNames = ["index.html"] });
         app.UseStaticFiles();
         app.MapFallbackToFile("index.html");
-        await app.RunAsync($"http://*:{WebAppPort}");
+
+        try
+        {
+            await app.RunAsync($"http://*:{WebAppPort}");
+        }
+        catch (IOException exception) when (exception.InnerException is AddressInUseException)
+        {
+            Console.WriteLine($"Address already in use: {WebAppUrl}");
+            Console.WriteLine("Skipping static server.");
+        }
     }
 
     public static async Task OpenPageInBrowserAsync()
@@ -27,7 +37,7 @@ public static class WebAppStaticServer
         await Task.Delay(200);
         try
         {
-            Process.Start(new ProcessStartInfo(WebAppUrl) { UseShellExecute = true });
+            Process.Start(new ProcessStartInfo(WebAppUrl) { UseShellExecute = true })?.WaitForExit();
         }
         catch
         {
