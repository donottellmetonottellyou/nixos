diff --git a/LegendsViewer.Backend/Controllers/FileSystemController.cs b/LegendsViewer.Backend/Controllers/FileSystemController.cs
index 92ee350..3b98a32 100644
--- a/LegendsViewer.Backend/Controllers/FileSystemController.cs
+++ b/LegendsViewer.Backend/Controllers/FileSystemController.cs
@@ -19,6 +19,12 @@ public class FileSystemController : ControllerBase
     [ProducesResponseType<FilesAndSubdirectoriesDto>(StatusCodes.Status200OK)]
     public ActionResult<FilesAndSubdirectoriesDto> Get([FromRoute] string encodedPath)
     {
+        if (encodedPath == "~")
+        {
+            return Ok(GetHomeInformation());
+        }
+        // I need to provide a way for windows to get the drives
+
         var path = HttpUtility.UrlDecode(encodedPath);
         if (!Path.Exists(path) && !Directory.Exists(path))
         {
@@ -39,11 +45,12 @@ public class FileSystemController : ControllerBase
             ParentDirectory = Directory.GetParent(directoryName)?.FullName,
             Subdirectories = Directory.GetDirectories(directoryName)
                 .Select(subDirectoryPath => Path.GetRelativePath(directoryName, subDirectoryPath))
-                .Where(f => !f.StartsWith('.')) // remove hidden directories
+                .Where(IsNotUnixHiddenPath)
                 .Order() // sort alphabetically
                 .ToArray(),
             Files = Directory.GetFiles(directoryName, $"*{BookmarkController.FileIdentifierLegendsXml}")
                 .Select(f => Path.GetFileName(f) ?? "")
+                .Where(IsNotUnixHiddenPath)
                 .Order()
                 .ToArray()
         };
@@ -89,14 +96,43 @@ public class FileSystemController : ControllerBase
                 ParentDirectory = null,
                 Subdirectories = rootDir.GetDirectories()
                     .Select(d => d.FullName)
-                    .Where(d => !d.StartsWith('.')) // remove hidden directories
+                    .Where(IsNotUnixHiddenPath)
                     .Order() // sort alphabetically
                     .ToArray(),
                 Files = rootDir.GetFiles()
                     .Select(f => f.FullName)
+                    .Where(IsNotUnixHiddenPath)
                     .Order()
                     .ToArray()
             };
         }
     }
+
+    private static FilesAndSubdirectoriesDto GetHomeInformation()
+    {
+        var homePath = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
+        var homeDir = new DirectoryInfo(homePath);
+
+        return new FilesAndSubdirectoriesDto
+        {
+            CurrentDirectory = homePath,
+            ParentDirectory = Directory.GetParent(homePath)?.FullName,
+            Subdirectories = homeDir.GetDirectories()
+                .Select(d => d.Name)
+                .Where(IsNotUnixHiddenPath)
+                .Order() // sort alphabetically
+                .ToArray(),
+            Files = homeDir.GetFiles()
+                .Select(f => f.Name)
+                .Where(IsNotUnixHiddenPath)
+                .Order()
+                .ToArray()
+        };
+    }
+
+    private static bool IsNotUnixHiddenPath(string path)
+    {
+        // Hide all '.' paths, except steam path
+        return !(path.StartsWith('.') && path != ".steam");
+    }
 }
diff --git a/LegendsViewer.Frontend/legends-viewer-frontend/src/stores/fileSystemStore.ts b/LegendsViewer.Frontend/legends-viewer-frontend/src/stores/fileSystemStore.ts
index 19cc723..e93d1ff 100644
--- a/LegendsViewer.Frontend/legends-viewer-frontend/src/stores/fileSystemStore.ts
+++ b/LegendsViewer.Frontend/legends-viewer-frontend/src/stores/fileSystemStore.ts
@@ -82,7 +82,7 @@ export const useFileSystemStore = defineStore('fileSystem', {
         const { data, error } = await client.GET(`/api/FileSystem/{path}`, {
           params: {
             path : {
-              path: storedPath ? encodeURIComponent(storedPath) : ""
+              path: storedPath ? encodeURIComponent(storedPath) : "~"
             }
           }
         });
